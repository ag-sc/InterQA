import interQA.PropertyNoun;
import junit.framework.TestCase;

import java.util.List;

/**
 * Created by Mariano on 26/06/2015.
 */

/**
 * Creates a interQA.PropertyNoun from a RDF file with the lexicon
 */
public class PropertyNounTest extends TestCase {

    PropertyNoun pn = new PropertyNoun("test1.rdf");
    /** The content of this file was generated by using http://services.lider-project.eu/lemonpatterns with this code
     interQA.Lexicon(<http://www.example.org/lexicon>, "en",
     RelationalNoun ("movie", <http://dbpedia.org/ontology/starring>,
     propSubj = CopulativeArg,
     propObj  = PrepositionalObject("with")),
     RelationalNoun ("movie", <http://dbpedia.org/ontology/director>,
     propSubj = CopulativeArg,
     propObj  = PrepositionalObject("by")),
     RelationalNoun ("capital", <http://dbpedia.org/ontology/capital>,
     propSubj = PrepositionalObject("of"),
     propObj  = CopulativeArg)
     )
     **/

    public void testlookahead() throws Exception {
        List<String> list = pn.lookahead(null); //list of parseable texts. Contains @lang
        //List<String> goodList = removeLang(list, "en");
        assertEquals(list.toString(), "[movie by, capital of, movie with]");
    }

    public void testgetInstances() throws Exception {
        List<String> list = pn.getInstances();
        assertEquals(list.toString(), "[Tarantino, Almodóvar, John Travolta, Robert De Niro]");
    }

//    public void testgetInstancesWithCanonicalForm() throws Exception {
//        List<String> list = pn.getInstances("movie with");
//        assertEquals(list.toString(), "[John Travolta, Robert De Niro]");
//    }


}